// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_schemas/ent/website"
	"_schemas/ent/websiteevent"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WebsiteEventCreate is the builder for creating a WebsiteEvent entity.
type WebsiteEventCreate struct {
	config
	mutation *WebsiteEventMutation
	hooks    []Hook
}

// SetEventName sets the "event_name" field.
func (wec *WebsiteEventCreate) SetEventName(s string) *WebsiteEventCreate {
	wec.mutation.SetEventName(s)
	return wec
}

// SetURLPath sets the "url_path" field.
func (wec *WebsiteEventCreate) SetURLPath(s string) *WebsiteEventCreate {
	wec.mutation.SetURLPath(s)
	return wec
}

// SetNillableURLPath sets the "url_path" field if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillableURLPath(s *string) *WebsiteEventCreate {
	if s != nil {
		wec.SetURLPath(*s)
	}
	return wec
}

// SetURLQuery sets the "url_query" field.
func (wec *WebsiteEventCreate) SetURLQuery(s string) *WebsiteEventCreate {
	wec.mutation.SetURLQuery(s)
	return wec
}

// SetNillableURLQuery sets the "url_query" field if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillableURLQuery(s *string) *WebsiteEventCreate {
	if s != nil {
		wec.SetURLQuery(*s)
	}
	return wec
}

// SetReferrerPath sets the "referrer_path" field.
func (wec *WebsiteEventCreate) SetReferrerPath(s string) *WebsiteEventCreate {
	wec.mutation.SetReferrerPath(s)
	return wec
}

// SetNillableReferrerPath sets the "referrer_path" field if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillableReferrerPath(s *string) *WebsiteEventCreate {
	if s != nil {
		wec.SetReferrerPath(*s)
	}
	return wec
}

// SetReferrerQuery sets the "referrer_query" field.
func (wec *WebsiteEventCreate) SetReferrerQuery(s string) *WebsiteEventCreate {
	wec.mutation.SetReferrerQuery(s)
	return wec
}

// SetNillableReferrerQuery sets the "referrer_query" field if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillableReferrerQuery(s *string) *WebsiteEventCreate {
	if s != nil {
		wec.SetReferrerQuery(*s)
	}
	return wec
}

// SetReferrerDomain sets the "referrer_domain" field.
func (wec *WebsiteEventCreate) SetReferrerDomain(s string) *WebsiteEventCreate {
	wec.mutation.SetReferrerDomain(s)
	return wec
}

// SetNillableReferrerDomain sets the "referrer_domain" field if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillableReferrerDomain(s *string) *WebsiteEventCreate {
	if s != nil {
		wec.SetReferrerDomain(*s)
	}
	return wec
}

// SetPageTitle sets the "page_title" field.
func (wec *WebsiteEventCreate) SetPageTitle(s string) *WebsiteEventCreate {
	wec.mutation.SetPageTitle(s)
	return wec
}

// SetNillablePageTitle sets the "page_title" field if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillablePageTitle(s *string) *WebsiteEventCreate {
	if s != nil {
		wec.SetPageTitle(*s)
	}
	return wec
}

// SetPageData sets the "page_data" field.
func (wec *WebsiteEventCreate) SetPageData(s string) *WebsiteEventCreate {
	wec.mutation.SetPageData(s)
	return wec
}

// SetNillablePageData sets the "page_data" field if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillablePageData(s *string) *WebsiteEventCreate {
	if s != nil {
		wec.SetPageData(*s)
	}
	return wec
}

// SetCreatedAt sets the "created_at" field.
func (wec *WebsiteEventCreate) SetCreatedAt(t time.Time) *WebsiteEventCreate {
	wec.mutation.SetCreatedAt(t)
	return wec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillableCreatedAt(t *time.Time) *WebsiteEventCreate {
	if t != nil {
		wec.SetCreatedAt(*t)
	}
	return wec
}

// SetID sets the "id" field.
func (wec *WebsiteEventCreate) SetID(u uuid.UUID) *WebsiteEventCreate {
	wec.mutation.SetID(u)
	return wec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillableID(u *uuid.UUID) *WebsiteEventCreate {
	if u != nil {
		wec.SetID(*u)
	}
	return wec
}

// SetWebsiteID sets the "website" edge to the Website entity by ID.
func (wec *WebsiteEventCreate) SetWebsiteID(id uuid.UUID) *WebsiteEventCreate {
	wec.mutation.SetWebsiteID(id)
	return wec
}

// SetNillableWebsiteID sets the "website" edge to the Website entity by ID if the given value is not nil.
func (wec *WebsiteEventCreate) SetNillableWebsiteID(id *uuid.UUID) *WebsiteEventCreate {
	if id != nil {
		wec = wec.SetWebsiteID(*id)
	}
	return wec
}

// SetWebsite sets the "website" edge to the Website entity.
func (wec *WebsiteEventCreate) SetWebsite(w *Website) *WebsiteEventCreate {
	return wec.SetWebsiteID(w.ID)
}

// Mutation returns the WebsiteEventMutation object of the builder.
func (wec *WebsiteEventCreate) Mutation() *WebsiteEventMutation {
	return wec.mutation
}

// Save creates the WebsiteEvent in the database.
func (wec *WebsiteEventCreate) Save(ctx context.Context) (*WebsiteEvent, error) {
	wec.defaults()
	return withHooks(ctx, wec.sqlSave, wec.mutation, wec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WebsiteEventCreate) SaveX(ctx context.Context) *WebsiteEvent {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wec *WebsiteEventCreate) Exec(ctx context.Context) error {
	_, err := wec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wec *WebsiteEventCreate) ExecX(ctx context.Context) {
	if err := wec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wec *WebsiteEventCreate) defaults() {
	if _, ok := wec.mutation.CreatedAt(); !ok {
		v := websiteevent.DefaultCreatedAt()
		wec.mutation.SetCreatedAt(v)
	}
	if _, ok := wec.mutation.ID(); !ok {
		v := websiteevent.DefaultID()
		wec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wec *WebsiteEventCreate) check() error {
	if _, ok := wec.mutation.EventName(); !ok {
		return &ValidationError{Name: "event_name", err: errors.New(`ent: missing required field "WebsiteEvent.event_name"`)}
	}
	if _, ok := wec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WebsiteEvent.created_at"`)}
	}
	return nil
}

func (wec *WebsiteEventCreate) sqlSave(ctx context.Context) (*WebsiteEvent, error) {
	if err := wec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wec.mutation.id = &_node.ID
	wec.mutation.done = true
	return _node, nil
}

func (wec *WebsiteEventCreate) createSpec() (*WebsiteEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &WebsiteEvent{config: wec.config}
		_spec = sqlgraph.NewCreateSpec(websiteevent.Table, sqlgraph.NewFieldSpec(websiteevent.FieldID, field.TypeUUID))
	)
	if id, ok := wec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wec.mutation.EventName(); ok {
		_spec.SetField(websiteevent.FieldEventName, field.TypeString, value)
		_node.EventName = value
	}
	if value, ok := wec.mutation.URLPath(); ok {
		_spec.SetField(websiteevent.FieldURLPath, field.TypeString, value)
		_node.URLPath = value
	}
	if value, ok := wec.mutation.URLQuery(); ok {
		_spec.SetField(websiteevent.FieldURLQuery, field.TypeString, value)
		_node.URLQuery = value
	}
	if value, ok := wec.mutation.ReferrerPath(); ok {
		_spec.SetField(websiteevent.FieldReferrerPath, field.TypeString, value)
		_node.ReferrerPath = value
	}
	if value, ok := wec.mutation.ReferrerQuery(); ok {
		_spec.SetField(websiteevent.FieldReferrerQuery, field.TypeString, value)
		_node.ReferrerQuery = value
	}
	if value, ok := wec.mutation.ReferrerDomain(); ok {
		_spec.SetField(websiteevent.FieldReferrerDomain, field.TypeString, value)
		_node.ReferrerDomain = value
	}
	if value, ok := wec.mutation.PageTitle(); ok {
		_spec.SetField(websiteevent.FieldPageTitle, field.TypeString, value)
		_node.PageTitle = value
	}
	if value, ok := wec.mutation.PageData(); ok {
		_spec.SetField(websiteevent.FieldPageData, field.TypeString, value)
		_node.PageData = value
	}
	if value, ok := wec.mutation.CreatedAt(); ok {
		_spec.SetField(websiteevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := wec.mutation.WebsiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   websiteevent.WebsiteTable,
			Columns: []string{websiteevent.WebsiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(website.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.website_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WebsiteEventCreateBulk is the builder for creating many WebsiteEvent entities in bulk.
type WebsiteEventCreateBulk struct {
	config
	builders []*WebsiteEventCreate
}

// Save creates the WebsiteEvent entities in the database.
func (wecb *WebsiteEventCreateBulk) Save(ctx context.Context) ([]*WebsiteEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WebsiteEvent, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebsiteEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WebsiteEventCreateBulk) SaveX(ctx context.Context) []*WebsiteEvent {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wecb *WebsiteEventCreateBulk) Exec(ctx context.Context) error {
	_, err := wecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecb *WebsiteEventCreateBulk) ExecX(ctx context.Context) {
	if err := wecb.Exec(ctx); err != nil {
		panic(err)
	}
}
