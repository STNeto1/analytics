// Code generated by ent, DO NOT EDIT.

package ent

import (
	"_schemas/ent/predicate"
	"_schemas/ent/user"
	"_schemas/ent/website"
	"_schemas/ent/websiteevent"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser         = "User"
	TypeWebsite      = "Website"
	TypeWebsiteEvent = "WebsiteEvent"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	name            *string
	email           *string
	password        *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	websites        map[uuid.UUID]struct{}
	removedwebsites map[uuid.UUID]struct{}
	clearedwebsites bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddWebsiteIDs adds the "websites" edge to the Website entity by ids.
func (m *UserMutation) AddWebsiteIDs(ids ...uuid.UUID) {
	if m.websites == nil {
		m.websites = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.websites[ids[i]] = struct{}{}
	}
}

// ClearWebsites clears the "websites" edge to the Website entity.
func (m *UserMutation) ClearWebsites() {
	m.clearedwebsites = true
}

// WebsitesCleared reports if the "websites" edge to the Website entity was cleared.
func (m *UserMutation) WebsitesCleared() bool {
	return m.clearedwebsites
}

// RemoveWebsiteIDs removes the "websites" edge to the Website entity by IDs.
func (m *UserMutation) RemoveWebsiteIDs(ids ...uuid.UUID) {
	if m.removedwebsites == nil {
		m.removedwebsites = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.websites, ids[i])
		m.removedwebsites[ids[i]] = struct{}{}
	}
}

// RemovedWebsites returns the removed IDs of the "websites" edge to the Website entity.
func (m *UserMutation) RemovedWebsitesIDs() (ids []uuid.UUID) {
	for id := range m.removedwebsites {
		ids = append(ids, id)
	}
	return
}

// WebsitesIDs returns the "websites" edge IDs in the mutation.
func (m *UserMutation) WebsitesIDs() (ids []uuid.UUID) {
	for id := range m.websites {
		ids = append(ids, id)
	}
	return
}

// ResetWebsites resets all changes to the "websites" edge.
func (m *UserMutation) ResetWebsites() {
	m.websites = nil
	m.clearedwebsites = false
	m.removedwebsites = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.websites != nil {
		edges = append(edges, user.EdgeWebsites)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeWebsites:
		ids := make([]ent.Value, 0, len(m.websites))
		for id := range m.websites {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedwebsites != nil {
		edges = append(edges, user.EdgeWebsites)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeWebsites:
		ids := make([]ent.Value, 0, len(m.removedwebsites))
		for id := range m.removedwebsites {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedwebsites {
		edges = append(edges, user.EdgeWebsites)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeWebsites:
		return m.clearedwebsites
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeWebsites:
		m.ResetWebsites()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// WebsiteMutation represents an operation that mutates the Website nodes in the graph.
type WebsiteMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	domain        *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	events        map[uuid.UUID]struct{}
	removedevents map[uuid.UUID]struct{}
	clearedevents bool
	done          bool
	oldValue      func(context.Context) (*Website, error)
	predicates    []predicate.Website
}

var _ ent.Mutation = (*WebsiteMutation)(nil)

// websiteOption allows management of the mutation configuration using functional options.
type websiteOption func(*WebsiteMutation)

// newWebsiteMutation creates new mutation for the Website entity.
func newWebsiteMutation(c config, op Op, opts ...websiteOption) *WebsiteMutation {
	m := &WebsiteMutation{
		config:        c,
		op:            op,
		typ:           TypeWebsite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebsiteID sets the ID field of the mutation.
func withWebsiteID(id uuid.UUID) websiteOption {
	return func(m *WebsiteMutation) {
		var (
			err   error
			once  sync.Once
			value *Website
		)
		m.oldValue = func(ctx context.Context) (*Website, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Website.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebsite sets the old Website of the mutation.
func withWebsite(node *Website) websiteOption {
	return func(m *WebsiteMutation) {
		m.oldValue = func(context.Context) (*Website, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebsiteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebsiteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Website entities.
func (m *WebsiteMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebsiteMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebsiteMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Website.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *WebsiteMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WebsiteMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WebsiteMutation) ResetName() {
	m.name = nil
}

// SetDomain sets the "domain" field.
func (m *WebsiteMutation) SetDomain(s string) {
	m.domain = &s
}

// Domain returns the value of the "domain" field in the mutation.
func (m *WebsiteMutation) Domain() (r string, exists bool) {
	v := m.domain
	if v == nil {
		return
	}
	return *v, true
}

// OldDomain returns the old "domain" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomain: %w", err)
	}
	return oldValue.Domain, nil
}

// ClearDomain clears the value of the "domain" field.
func (m *WebsiteMutation) ClearDomain() {
	m.domain = nil
	m.clearedFields[website.FieldDomain] = struct{}{}
}

// DomainCleared returns if the "domain" field was cleared in this mutation.
func (m *WebsiteMutation) DomainCleared() bool {
	_, ok := m.clearedFields[website.FieldDomain]
	return ok
}

// ResetDomain resets all changes to the "domain" field.
func (m *WebsiteMutation) ResetDomain() {
	m.domain = nil
	delete(m.clearedFields, website.FieldDomain)
}

// SetCreatedAt sets the "created_at" field.
func (m *WebsiteMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WebsiteMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WebsiteMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WebsiteMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WebsiteMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WebsiteMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *WebsiteMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *WebsiteMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *WebsiteMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[website.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *WebsiteMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[website.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *WebsiteMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, website.FieldDeletedAt)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *WebsiteMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *WebsiteMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *WebsiteMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *WebsiteMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *WebsiteMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *WebsiteMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddEventIDs adds the "events" edge to the WebsiteEvent entity by ids.
func (m *WebsiteMutation) AddEventIDs(ids ...uuid.UUID) {
	if m.events == nil {
		m.events = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.events[ids[i]] = struct{}{}
	}
}

// ClearEvents clears the "events" edge to the WebsiteEvent entity.
func (m *WebsiteMutation) ClearEvents() {
	m.clearedevents = true
}

// EventsCleared reports if the "events" edge to the WebsiteEvent entity was cleared.
func (m *WebsiteMutation) EventsCleared() bool {
	return m.clearedevents
}

// RemoveEventIDs removes the "events" edge to the WebsiteEvent entity by IDs.
func (m *WebsiteMutation) RemoveEventIDs(ids ...uuid.UUID) {
	if m.removedevents == nil {
		m.removedevents = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.events, ids[i])
		m.removedevents[ids[i]] = struct{}{}
	}
}

// RemovedEvents returns the removed IDs of the "events" edge to the WebsiteEvent entity.
func (m *WebsiteMutation) RemovedEventsIDs() (ids []uuid.UUID) {
	for id := range m.removedevents {
		ids = append(ids, id)
	}
	return
}

// EventsIDs returns the "events" edge IDs in the mutation.
func (m *WebsiteMutation) EventsIDs() (ids []uuid.UUID) {
	for id := range m.events {
		ids = append(ids, id)
	}
	return
}

// ResetEvents resets all changes to the "events" edge.
func (m *WebsiteMutation) ResetEvents() {
	m.events = nil
	m.clearedevents = false
	m.removedevents = nil
}

// Where appends a list predicates to the WebsiteMutation builder.
func (m *WebsiteMutation) Where(ps ...predicate.Website) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebsiteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebsiteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Website, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebsiteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebsiteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Website).
func (m *WebsiteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebsiteMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, website.FieldName)
	}
	if m.domain != nil {
		fields = append(fields, website.FieldDomain)
	}
	if m.created_at != nil {
		fields = append(fields, website.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, website.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, website.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebsiteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case website.FieldName:
		return m.Name()
	case website.FieldDomain:
		return m.Domain()
	case website.FieldCreatedAt:
		return m.CreatedAt()
	case website.FieldUpdatedAt:
		return m.UpdatedAt()
	case website.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebsiteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case website.FieldName:
		return m.OldName(ctx)
	case website.FieldDomain:
		return m.OldDomain(ctx)
	case website.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case website.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case website.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Website field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case website.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case website.FieldDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomain(v)
		return nil
	case website.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case website.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case website.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Website field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebsiteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebsiteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Website numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebsiteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(website.FieldDomain) {
		fields = append(fields, website.FieldDomain)
	}
	if m.FieldCleared(website.FieldDeletedAt) {
		fields = append(fields, website.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebsiteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebsiteMutation) ClearField(name string) error {
	switch name {
	case website.FieldDomain:
		m.ClearDomain()
		return nil
	case website.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Website nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebsiteMutation) ResetField(name string) error {
	switch name {
	case website.FieldName:
		m.ResetName()
		return nil
	case website.FieldDomain:
		m.ResetDomain()
		return nil
	case website.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case website.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case website.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Website field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebsiteMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, website.EdgeUser)
	}
	if m.events != nil {
		edges = append(edges, website.EdgeEvents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebsiteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case website.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case website.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.events))
		for id := range m.events {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebsiteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedevents != nil {
		edges = append(edges, website.EdgeEvents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebsiteMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case website.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.removedevents))
		for id := range m.removedevents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebsiteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, website.EdgeUser)
	}
	if m.clearedevents {
		edges = append(edges, website.EdgeEvents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebsiteMutation) EdgeCleared(name string) bool {
	switch name {
	case website.EdgeUser:
		return m.cleareduser
	case website.EdgeEvents:
		return m.clearedevents
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebsiteMutation) ClearEdge(name string) error {
	switch name {
	case website.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Website unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebsiteMutation) ResetEdge(name string) error {
	switch name {
	case website.EdgeUser:
		m.ResetUser()
		return nil
	case website.EdgeEvents:
		m.ResetEvents()
		return nil
	}
	return fmt.Errorf("unknown Website edge %s", name)
}

// WebsiteEventMutation represents an operation that mutates the WebsiteEvent nodes in the graph.
type WebsiteEventMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	event_name      *string
	url_path        *string
	url_query       *string
	referrer_path   *string
	referrer_query  *string
	referrer_domain *string
	page_title      *string
	page_data       *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	website         *uuid.UUID
	clearedwebsite  bool
	done            bool
	oldValue        func(context.Context) (*WebsiteEvent, error)
	predicates      []predicate.WebsiteEvent
}

var _ ent.Mutation = (*WebsiteEventMutation)(nil)

// websiteeventOption allows management of the mutation configuration using functional options.
type websiteeventOption func(*WebsiteEventMutation)

// newWebsiteEventMutation creates new mutation for the WebsiteEvent entity.
func newWebsiteEventMutation(c config, op Op, opts ...websiteeventOption) *WebsiteEventMutation {
	m := &WebsiteEventMutation{
		config:        c,
		op:            op,
		typ:           TypeWebsiteEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebsiteEventID sets the ID field of the mutation.
func withWebsiteEventID(id uuid.UUID) websiteeventOption {
	return func(m *WebsiteEventMutation) {
		var (
			err   error
			once  sync.Once
			value *WebsiteEvent
		)
		m.oldValue = func(ctx context.Context) (*WebsiteEvent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WebsiteEvent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebsiteEvent sets the old WebsiteEvent of the mutation.
func withWebsiteEvent(node *WebsiteEvent) websiteeventOption {
	return func(m *WebsiteEventMutation) {
		m.oldValue = func(context.Context) (*WebsiteEvent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebsiteEventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebsiteEventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WebsiteEvent entities.
func (m *WebsiteEventMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebsiteEventMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebsiteEventMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WebsiteEvent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventName sets the "event_name" field.
func (m *WebsiteEventMutation) SetEventName(s string) {
	m.event_name = &s
}

// EventName returns the value of the "event_name" field in the mutation.
func (m *WebsiteEventMutation) EventName() (r string, exists bool) {
	v := m.event_name
	if v == nil {
		return
	}
	return *v, true
}

// OldEventName returns the old "event_name" field's value of the WebsiteEvent entity.
// If the WebsiteEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteEventMutation) OldEventName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventName: %w", err)
	}
	return oldValue.EventName, nil
}

// ResetEventName resets all changes to the "event_name" field.
func (m *WebsiteEventMutation) ResetEventName() {
	m.event_name = nil
}

// SetURLPath sets the "url_path" field.
func (m *WebsiteEventMutation) SetURLPath(s string) {
	m.url_path = &s
}

// URLPath returns the value of the "url_path" field in the mutation.
func (m *WebsiteEventMutation) URLPath() (r string, exists bool) {
	v := m.url_path
	if v == nil {
		return
	}
	return *v, true
}

// OldURLPath returns the old "url_path" field's value of the WebsiteEvent entity.
// If the WebsiteEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteEventMutation) OldURLPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURLPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURLPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLPath: %w", err)
	}
	return oldValue.URLPath, nil
}

// ClearURLPath clears the value of the "url_path" field.
func (m *WebsiteEventMutation) ClearURLPath() {
	m.url_path = nil
	m.clearedFields[websiteevent.FieldURLPath] = struct{}{}
}

// URLPathCleared returns if the "url_path" field was cleared in this mutation.
func (m *WebsiteEventMutation) URLPathCleared() bool {
	_, ok := m.clearedFields[websiteevent.FieldURLPath]
	return ok
}

// ResetURLPath resets all changes to the "url_path" field.
func (m *WebsiteEventMutation) ResetURLPath() {
	m.url_path = nil
	delete(m.clearedFields, websiteevent.FieldURLPath)
}

// SetURLQuery sets the "url_query" field.
func (m *WebsiteEventMutation) SetURLQuery(s string) {
	m.url_query = &s
}

// URLQuery returns the value of the "url_query" field in the mutation.
func (m *WebsiteEventMutation) URLQuery() (r string, exists bool) {
	v := m.url_query
	if v == nil {
		return
	}
	return *v, true
}

// OldURLQuery returns the old "url_query" field's value of the WebsiteEvent entity.
// If the WebsiteEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteEventMutation) OldURLQuery(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURLQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURLQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLQuery: %w", err)
	}
	return oldValue.URLQuery, nil
}

// ClearURLQuery clears the value of the "url_query" field.
func (m *WebsiteEventMutation) ClearURLQuery() {
	m.url_query = nil
	m.clearedFields[websiteevent.FieldURLQuery] = struct{}{}
}

// URLQueryCleared returns if the "url_query" field was cleared in this mutation.
func (m *WebsiteEventMutation) URLQueryCleared() bool {
	_, ok := m.clearedFields[websiteevent.FieldURLQuery]
	return ok
}

// ResetURLQuery resets all changes to the "url_query" field.
func (m *WebsiteEventMutation) ResetURLQuery() {
	m.url_query = nil
	delete(m.clearedFields, websiteevent.FieldURLQuery)
}

// SetReferrerPath sets the "referrer_path" field.
func (m *WebsiteEventMutation) SetReferrerPath(s string) {
	m.referrer_path = &s
}

// ReferrerPath returns the value of the "referrer_path" field in the mutation.
func (m *WebsiteEventMutation) ReferrerPath() (r string, exists bool) {
	v := m.referrer_path
	if v == nil {
		return
	}
	return *v, true
}

// OldReferrerPath returns the old "referrer_path" field's value of the WebsiteEvent entity.
// If the WebsiteEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteEventMutation) OldReferrerPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferrerPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferrerPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferrerPath: %w", err)
	}
	return oldValue.ReferrerPath, nil
}

// ClearReferrerPath clears the value of the "referrer_path" field.
func (m *WebsiteEventMutation) ClearReferrerPath() {
	m.referrer_path = nil
	m.clearedFields[websiteevent.FieldReferrerPath] = struct{}{}
}

// ReferrerPathCleared returns if the "referrer_path" field was cleared in this mutation.
func (m *WebsiteEventMutation) ReferrerPathCleared() bool {
	_, ok := m.clearedFields[websiteevent.FieldReferrerPath]
	return ok
}

// ResetReferrerPath resets all changes to the "referrer_path" field.
func (m *WebsiteEventMutation) ResetReferrerPath() {
	m.referrer_path = nil
	delete(m.clearedFields, websiteevent.FieldReferrerPath)
}

// SetReferrerQuery sets the "referrer_query" field.
func (m *WebsiteEventMutation) SetReferrerQuery(s string) {
	m.referrer_query = &s
}

// ReferrerQuery returns the value of the "referrer_query" field in the mutation.
func (m *WebsiteEventMutation) ReferrerQuery() (r string, exists bool) {
	v := m.referrer_query
	if v == nil {
		return
	}
	return *v, true
}

// OldReferrerQuery returns the old "referrer_query" field's value of the WebsiteEvent entity.
// If the WebsiteEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteEventMutation) OldReferrerQuery(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferrerQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferrerQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferrerQuery: %w", err)
	}
	return oldValue.ReferrerQuery, nil
}

// ClearReferrerQuery clears the value of the "referrer_query" field.
func (m *WebsiteEventMutation) ClearReferrerQuery() {
	m.referrer_query = nil
	m.clearedFields[websiteevent.FieldReferrerQuery] = struct{}{}
}

// ReferrerQueryCleared returns if the "referrer_query" field was cleared in this mutation.
func (m *WebsiteEventMutation) ReferrerQueryCleared() bool {
	_, ok := m.clearedFields[websiteevent.FieldReferrerQuery]
	return ok
}

// ResetReferrerQuery resets all changes to the "referrer_query" field.
func (m *WebsiteEventMutation) ResetReferrerQuery() {
	m.referrer_query = nil
	delete(m.clearedFields, websiteevent.FieldReferrerQuery)
}

// SetReferrerDomain sets the "referrer_domain" field.
func (m *WebsiteEventMutation) SetReferrerDomain(s string) {
	m.referrer_domain = &s
}

// ReferrerDomain returns the value of the "referrer_domain" field in the mutation.
func (m *WebsiteEventMutation) ReferrerDomain() (r string, exists bool) {
	v := m.referrer_domain
	if v == nil {
		return
	}
	return *v, true
}

// OldReferrerDomain returns the old "referrer_domain" field's value of the WebsiteEvent entity.
// If the WebsiteEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteEventMutation) OldReferrerDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferrerDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferrerDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferrerDomain: %w", err)
	}
	return oldValue.ReferrerDomain, nil
}

// ClearReferrerDomain clears the value of the "referrer_domain" field.
func (m *WebsiteEventMutation) ClearReferrerDomain() {
	m.referrer_domain = nil
	m.clearedFields[websiteevent.FieldReferrerDomain] = struct{}{}
}

// ReferrerDomainCleared returns if the "referrer_domain" field was cleared in this mutation.
func (m *WebsiteEventMutation) ReferrerDomainCleared() bool {
	_, ok := m.clearedFields[websiteevent.FieldReferrerDomain]
	return ok
}

// ResetReferrerDomain resets all changes to the "referrer_domain" field.
func (m *WebsiteEventMutation) ResetReferrerDomain() {
	m.referrer_domain = nil
	delete(m.clearedFields, websiteevent.FieldReferrerDomain)
}

// SetPageTitle sets the "page_title" field.
func (m *WebsiteEventMutation) SetPageTitle(s string) {
	m.page_title = &s
}

// PageTitle returns the value of the "page_title" field in the mutation.
func (m *WebsiteEventMutation) PageTitle() (r string, exists bool) {
	v := m.page_title
	if v == nil {
		return
	}
	return *v, true
}

// OldPageTitle returns the old "page_title" field's value of the WebsiteEvent entity.
// If the WebsiteEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteEventMutation) OldPageTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageTitle: %w", err)
	}
	return oldValue.PageTitle, nil
}

// ClearPageTitle clears the value of the "page_title" field.
func (m *WebsiteEventMutation) ClearPageTitle() {
	m.page_title = nil
	m.clearedFields[websiteevent.FieldPageTitle] = struct{}{}
}

// PageTitleCleared returns if the "page_title" field was cleared in this mutation.
func (m *WebsiteEventMutation) PageTitleCleared() bool {
	_, ok := m.clearedFields[websiteevent.FieldPageTitle]
	return ok
}

// ResetPageTitle resets all changes to the "page_title" field.
func (m *WebsiteEventMutation) ResetPageTitle() {
	m.page_title = nil
	delete(m.clearedFields, websiteevent.FieldPageTitle)
}

// SetPageData sets the "page_data" field.
func (m *WebsiteEventMutation) SetPageData(s string) {
	m.page_data = &s
}

// PageData returns the value of the "page_data" field in the mutation.
func (m *WebsiteEventMutation) PageData() (r string, exists bool) {
	v := m.page_data
	if v == nil {
		return
	}
	return *v, true
}

// OldPageData returns the old "page_data" field's value of the WebsiteEvent entity.
// If the WebsiteEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteEventMutation) OldPageData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageData: %w", err)
	}
	return oldValue.PageData, nil
}

// ClearPageData clears the value of the "page_data" field.
func (m *WebsiteEventMutation) ClearPageData() {
	m.page_data = nil
	m.clearedFields[websiteevent.FieldPageData] = struct{}{}
}

// PageDataCleared returns if the "page_data" field was cleared in this mutation.
func (m *WebsiteEventMutation) PageDataCleared() bool {
	_, ok := m.clearedFields[websiteevent.FieldPageData]
	return ok
}

// ResetPageData resets all changes to the "page_data" field.
func (m *WebsiteEventMutation) ResetPageData() {
	m.page_data = nil
	delete(m.clearedFields, websiteevent.FieldPageData)
}

// SetCreatedAt sets the "created_at" field.
func (m *WebsiteEventMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WebsiteEventMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WebsiteEvent entity.
// If the WebsiteEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteEventMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WebsiteEventMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetWebsiteID sets the "website" edge to the Website entity by id.
func (m *WebsiteEventMutation) SetWebsiteID(id uuid.UUID) {
	m.website = &id
}

// ClearWebsite clears the "website" edge to the Website entity.
func (m *WebsiteEventMutation) ClearWebsite() {
	m.clearedwebsite = true
}

// WebsiteCleared reports if the "website" edge to the Website entity was cleared.
func (m *WebsiteEventMutation) WebsiteCleared() bool {
	return m.clearedwebsite
}

// WebsiteID returns the "website" edge ID in the mutation.
func (m *WebsiteEventMutation) WebsiteID() (id uuid.UUID, exists bool) {
	if m.website != nil {
		return *m.website, true
	}
	return
}

// WebsiteIDs returns the "website" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WebsiteID instead. It exists only for internal usage by the builders.
func (m *WebsiteEventMutation) WebsiteIDs() (ids []uuid.UUID) {
	if id := m.website; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWebsite resets all changes to the "website" edge.
func (m *WebsiteEventMutation) ResetWebsite() {
	m.website = nil
	m.clearedwebsite = false
}

// Where appends a list predicates to the WebsiteEventMutation builder.
func (m *WebsiteEventMutation) Where(ps ...predicate.WebsiteEvent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebsiteEventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebsiteEventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WebsiteEvent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebsiteEventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebsiteEventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WebsiteEvent).
func (m *WebsiteEventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebsiteEventMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.event_name != nil {
		fields = append(fields, websiteevent.FieldEventName)
	}
	if m.url_path != nil {
		fields = append(fields, websiteevent.FieldURLPath)
	}
	if m.url_query != nil {
		fields = append(fields, websiteevent.FieldURLQuery)
	}
	if m.referrer_path != nil {
		fields = append(fields, websiteevent.FieldReferrerPath)
	}
	if m.referrer_query != nil {
		fields = append(fields, websiteevent.FieldReferrerQuery)
	}
	if m.referrer_domain != nil {
		fields = append(fields, websiteevent.FieldReferrerDomain)
	}
	if m.page_title != nil {
		fields = append(fields, websiteevent.FieldPageTitle)
	}
	if m.page_data != nil {
		fields = append(fields, websiteevent.FieldPageData)
	}
	if m.created_at != nil {
		fields = append(fields, websiteevent.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebsiteEventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case websiteevent.FieldEventName:
		return m.EventName()
	case websiteevent.FieldURLPath:
		return m.URLPath()
	case websiteevent.FieldURLQuery:
		return m.URLQuery()
	case websiteevent.FieldReferrerPath:
		return m.ReferrerPath()
	case websiteevent.FieldReferrerQuery:
		return m.ReferrerQuery()
	case websiteevent.FieldReferrerDomain:
		return m.ReferrerDomain()
	case websiteevent.FieldPageTitle:
		return m.PageTitle()
	case websiteevent.FieldPageData:
		return m.PageData()
	case websiteevent.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebsiteEventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case websiteevent.FieldEventName:
		return m.OldEventName(ctx)
	case websiteevent.FieldURLPath:
		return m.OldURLPath(ctx)
	case websiteevent.FieldURLQuery:
		return m.OldURLQuery(ctx)
	case websiteevent.FieldReferrerPath:
		return m.OldReferrerPath(ctx)
	case websiteevent.FieldReferrerQuery:
		return m.OldReferrerQuery(ctx)
	case websiteevent.FieldReferrerDomain:
		return m.OldReferrerDomain(ctx)
	case websiteevent.FieldPageTitle:
		return m.OldPageTitle(ctx)
	case websiteevent.FieldPageData:
		return m.OldPageData(ctx)
	case websiteevent.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown WebsiteEvent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteEventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case websiteevent.FieldEventName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventName(v)
		return nil
	case websiteevent.FieldURLPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLPath(v)
		return nil
	case websiteevent.FieldURLQuery:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLQuery(v)
		return nil
	case websiteevent.FieldReferrerPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferrerPath(v)
		return nil
	case websiteevent.FieldReferrerQuery:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferrerQuery(v)
		return nil
	case websiteevent.FieldReferrerDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferrerDomain(v)
		return nil
	case websiteevent.FieldPageTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageTitle(v)
		return nil
	case websiteevent.FieldPageData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageData(v)
		return nil
	case websiteevent.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown WebsiteEvent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebsiteEventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebsiteEventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteEventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WebsiteEvent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebsiteEventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(websiteevent.FieldURLPath) {
		fields = append(fields, websiteevent.FieldURLPath)
	}
	if m.FieldCleared(websiteevent.FieldURLQuery) {
		fields = append(fields, websiteevent.FieldURLQuery)
	}
	if m.FieldCleared(websiteevent.FieldReferrerPath) {
		fields = append(fields, websiteevent.FieldReferrerPath)
	}
	if m.FieldCleared(websiteevent.FieldReferrerQuery) {
		fields = append(fields, websiteevent.FieldReferrerQuery)
	}
	if m.FieldCleared(websiteevent.FieldReferrerDomain) {
		fields = append(fields, websiteevent.FieldReferrerDomain)
	}
	if m.FieldCleared(websiteevent.FieldPageTitle) {
		fields = append(fields, websiteevent.FieldPageTitle)
	}
	if m.FieldCleared(websiteevent.FieldPageData) {
		fields = append(fields, websiteevent.FieldPageData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebsiteEventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebsiteEventMutation) ClearField(name string) error {
	switch name {
	case websiteevent.FieldURLPath:
		m.ClearURLPath()
		return nil
	case websiteevent.FieldURLQuery:
		m.ClearURLQuery()
		return nil
	case websiteevent.FieldReferrerPath:
		m.ClearReferrerPath()
		return nil
	case websiteevent.FieldReferrerQuery:
		m.ClearReferrerQuery()
		return nil
	case websiteevent.FieldReferrerDomain:
		m.ClearReferrerDomain()
		return nil
	case websiteevent.FieldPageTitle:
		m.ClearPageTitle()
		return nil
	case websiteevent.FieldPageData:
		m.ClearPageData()
		return nil
	}
	return fmt.Errorf("unknown WebsiteEvent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebsiteEventMutation) ResetField(name string) error {
	switch name {
	case websiteevent.FieldEventName:
		m.ResetEventName()
		return nil
	case websiteevent.FieldURLPath:
		m.ResetURLPath()
		return nil
	case websiteevent.FieldURLQuery:
		m.ResetURLQuery()
		return nil
	case websiteevent.FieldReferrerPath:
		m.ResetReferrerPath()
		return nil
	case websiteevent.FieldReferrerQuery:
		m.ResetReferrerQuery()
		return nil
	case websiteevent.FieldReferrerDomain:
		m.ResetReferrerDomain()
		return nil
	case websiteevent.FieldPageTitle:
		m.ResetPageTitle()
		return nil
	case websiteevent.FieldPageData:
		m.ResetPageData()
		return nil
	case websiteevent.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown WebsiteEvent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebsiteEventMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.website != nil {
		edges = append(edges, websiteevent.EdgeWebsite)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebsiteEventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case websiteevent.EdgeWebsite:
		if id := m.website; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebsiteEventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebsiteEventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebsiteEventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedwebsite {
		edges = append(edges, websiteevent.EdgeWebsite)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebsiteEventMutation) EdgeCleared(name string) bool {
	switch name {
	case websiteevent.EdgeWebsite:
		return m.clearedwebsite
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebsiteEventMutation) ClearEdge(name string) error {
	switch name {
	case websiteevent.EdgeWebsite:
		m.ClearWebsite()
		return nil
	}
	return fmt.Errorf("unknown WebsiteEvent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebsiteEventMutation) ResetEdge(name string) error {
	switch name {
	case websiteevent.EdgeWebsite:
		m.ResetWebsite()
		return nil
	}
	return fmt.Errorf("unknown WebsiteEvent edge %s", name)
}
