// Code generated by ent, DO NOT EDIT.

package websiteevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the websiteevent type in the database.
	Label = "website_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEventName holds the string denoting the event_name field in the database.
	FieldEventName = "event_name"
	// FieldURLPath holds the string denoting the url_path field in the database.
	FieldURLPath = "url_path"
	// FieldURLQuery holds the string denoting the url_query field in the database.
	FieldURLQuery = "url_query"
	// FieldReferrerPath holds the string denoting the referrer_path field in the database.
	FieldReferrerPath = "referrer_path"
	// FieldReferrerQuery holds the string denoting the referrer_query field in the database.
	FieldReferrerQuery = "referrer_query"
	// FieldReferrerDomain holds the string denoting the referrer_domain field in the database.
	FieldReferrerDomain = "referrer_domain"
	// FieldPageTitle holds the string denoting the page_title field in the database.
	FieldPageTitle = "page_title"
	// FieldPageData holds the string denoting the page_data field in the database.
	FieldPageData = "page_data"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeWebsite holds the string denoting the website edge name in mutations.
	EdgeWebsite = "website"
	// Table holds the table name of the websiteevent in the database.
	Table = "website_events"
	// WebsiteTable is the table that holds the website relation/edge.
	WebsiteTable = "website_events"
	// WebsiteInverseTable is the table name for the Website entity.
	// It exists in this package in order to avoid circular dependency with the "website" package.
	WebsiteInverseTable = "websites"
	// WebsiteColumn is the table column denoting the website relation/edge.
	WebsiteColumn = "website_id"
)

// Columns holds all SQL columns for websiteevent fields.
var Columns = []string{
	FieldID,
	FieldEventName,
	FieldURLPath,
	FieldURLQuery,
	FieldReferrerPath,
	FieldReferrerQuery,
	FieldReferrerDomain,
	FieldPageTitle,
	FieldPageData,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "website_events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"website_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WebsiteEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventName orders the results by the event_name field.
func ByEventName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventName, opts...).ToFunc()
}

// ByURLPath orders the results by the url_path field.
func ByURLPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLPath, opts...).ToFunc()
}

// ByURLQuery orders the results by the url_query field.
func ByURLQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLQuery, opts...).ToFunc()
}

// ByReferrerPath orders the results by the referrer_path field.
func ByReferrerPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferrerPath, opts...).ToFunc()
}

// ByReferrerQuery orders the results by the referrer_query field.
func ByReferrerQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferrerQuery, opts...).ToFunc()
}

// ByReferrerDomain orders the results by the referrer_domain field.
func ByReferrerDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferrerDomain, opts...).ToFunc()
}

// ByPageTitle orders the results by the page_title field.
func ByPageTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPageTitle, opts...).ToFunc()
}

// ByPageData orders the results by the page_data field.
func ByPageData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPageData, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByWebsiteField orders the results by website field.
func ByWebsiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWebsiteStep(), sql.OrderByField(field, opts...))
	}
}
func newWebsiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WebsiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WebsiteTable, WebsiteColumn),
	)
}
