// Code generated by ent, DO NOT EDIT.

package websiteevent

import (
	"_schemas/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldID, id))
}

// EventName applies equality check predicate on the "event_name" field. It's identical to EventNameEQ.
func EventName(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldEventName, v))
}

// URLPath applies equality check predicate on the "url_path" field. It's identical to URLPathEQ.
func URLPath(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldURLPath, v))
}

// URLQuery applies equality check predicate on the "url_query" field. It's identical to URLQueryEQ.
func URLQuery(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldURLQuery, v))
}

// ReferrerPath applies equality check predicate on the "referrer_path" field. It's identical to ReferrerPathEQ.
func ReferrerPath(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldReferrerPath, v))
}

// ReferrerQuery applies equality check predicate on the "referrer_query" field. It's identical to ReferrerQueryEQ.
func ReferrerQuery(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldReferrerQuery, v))
}

// ReferrerDomain applies equality check predicate on the "referrer_domain" field. It's identical to ReferrerDomainEQ.
func ReferrerDomain(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldReferrerDomain, v))
}

// PageTitle applies equality check predicate on the "page_title" field. It's identical to PageTitleEQ.
func PageTitle(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldPageTitle, v))
}

// PageData applies equality check predicate on the "page_data" field. It's identical to PageDataEQ.
func PageData(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldPageData, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// EventNameEQ applies the EQ predicate on the "event_name" field.
func EventNameEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldEventName, v))
}

// EventNameNEQ applies the NEQ predicate on the "event_name" field.
func EventNameNEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldEventName, v))
}

// EventNameIn applies the In predicate on the "event_name" field.
func EventNameIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldEventName, vs...))
}

// EventNameNotIn applies the NotIn predicate on the "event_name" field.
func EventNameNotIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldEventName, vs...))
}

// EventNameGT applies the GT predicate on the "event_name" field.
func EventNameGT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldEventName, v))
}

// EventNameGTE applies the GTE predicate on the "event_name" field.
func EventNameGTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldEventName, v))
}

// EventNameLT applies the LT predicate on the "event_name" field.
func EventNameLT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldEventName, v))
}

// EventNameLTE applies the LTE predicate on the "event_name" field.
func EventNameLTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldEventName, v))
}

// EventNameContains applies the Contains predicate on the "event_name" field.
func EventNameContains(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContains(FieldEventName, v))
}

// EventNameHasPrefix applies the HasPrefix predicate on the "event_name" field.
func EventNameHasPrefix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasPrefix(FieldEventName, v))
}

// EventNameHasSuffix applies the HasSuffix predicate on the "event_name" field.
func EventNameHasSuffix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasSuffix(FieldEventName, v))
}

// EventNameEqualFold applies the EqualFold predicate on the "event_name" field.
func EventNameEqualFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEqualFold(FieldEventName, v))
}

// EventNameContainsFold applies the ContainsFold predicate on the "event_name" field.
func EventNameContainsFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContainsFold(FieldEventName, v))
}

// URLPathEQ applies the EQ predicate on the "url_path" field.
func URLPathEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldURLPath, v))
}

// URLPathNEQ applies the NEQ predicate on the "url_path" field.
func URLPathNEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldURLPath, v))
}

// URLPathIn applies the In predicate on the "url_path" field.
func URLPathIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldURLPath, vs...))
}

// URLPathNotIn applies the NotIn predicate on the "url_path" field.
func URLPathNotIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldURLPath, vs...))
}

// URLPathGT applies the GT predicate on the "url_path" field.
func URLPathGT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldURLPath, v))
}

// URLPathGTE applies the GTE predicate on the "url_path" field.
func URLPathGTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldURLPath, v))
}

// URLPathLT applies the LT predicate on the "url_path" field.
func URLPathLT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldURLPath, v))
}

// URLPathLTE applies the LTE predicate on the "url_path" field.
func URLPathLTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldURLPath, v))
}

// URLPathContains applies the Contains predicate on the "url_path" field.
func URLPathContains(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContains(FieldURLPath, v))
}

// URLPathHasPrefix applies the HasPrefix predicate on the "url_path" field.
func URLPathHasPrefix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasPrefix(FieldURLPath, v))
}

// URLPathHasSuffix applies the HasSuffix predicate on the "url_path" field.
func URLPathHasSuffix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasSuffix(FieldURLPath, v))
}

// URLPathIsNil applies the IsNil predicate on the "url_path" field.
func URLPathIsNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIsNull(FieldURLPath))
}

// URLPathNotNil applies the NotNil predicate on the "url_path" field.
func URLPathNotNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotNull(FieldURLPath))
}

// URLPathEqualFold applies the EqualFold predicate on the "url_path" field.
func URLPathEqualFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEqualFold(FieldURLPath, v))
}

// URLPathContainsFold applies the ContainsFold predicate on the "url_path" field.
func URLPathContainsFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContainsFold(FieldURLPath, v))
}

// URLQueryEQ applies the EQ predicate on the "url_query" field.
func URLQueryEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldURLQuery, v))
}

// URLQueryNEQ applies the NEQ predicate on the "url_query" field.
func URLQueryNEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldURLQuery, v))
}

// URLQueryIn applies the In predicate on the "url_query" field.
func URLQueryIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldURLQuery, vs...))
}

// URLQueryNotIn applies the NotIn predicate on the "url_query" field.
func URLQueryNotIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldURLQuery, vs...))
}

// URLQueryGT applies the GT predicate on the "url_query" field.
func URLQueryGT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldURLQuery, v))
}

// URLQueryGTE applies the GTE predicate on the "url_query" field.
func URLQueryGTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldURLQuery, v))
}

// URLQueryLT applies the LT predicate on the "url_query" field.
func URLQueryLT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldURLQuery, v))
}

// URLQueryLTE applies the LTE predicate on the "url_query" field.
func URLQueryLTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldURLQuery, v))
}

// URLQueryContains applies the Contains predicate on the "url_query" field.
func URLQueryContains(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContains(FieldURLQuery, v))
}

// URLQueryHasPrefix applies the HasPrefix predicate on the "url_query" field.
func URLQueryHasPrefix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasPrefix(FieldURLQuery, v))
}

// URLQueryHasSuffix applies the HasSuffix predicate on the "url_query" field.
func URLQueryHasSuffix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasSuffix(FieldURLQuery, v))
}

// URLQueryIsNil applies the IsNil predicate on the "url_query" field.
func URLQueryIsNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIsNull(FieldURLQuery))
}

// URLQueryNotNil applies the NotNil predicate on the "url_query" field.
func URLQueryNotNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotNull(FieldURLQuery))
}

// URLQueryEqualFold applies the EqualFold predicate on the "url_query" field.
func URLQueryEqualFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEqualFold(FieldURLQuery, v))
}

// URLQueryContainsFold applies the ContainsFold predicate on the "url_query" field.
func URLQueryContainsFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContainsFold(FieldURLQuery, v))
}

// ReferrerPathEQ applies the EQ predicate on the "referrer_path" field.
func ReferrerPathEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldReferrerPath, v))
}

// ReferrerPathNEQ applies the NEQ predicate on the "referrer_path" field.
func ReferrerPathNEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldReferrerPath, v))
}

// ReferrerPathIn applies the In predicate on the "referrer_path" field.
func ReferrerPathIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldReferrerPath, vs...))
}

// ReferrerPathNotIn applies the NotIn predicate on the "referrer_path" field.
func ReferrerPathNotIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldReferrerPath, vs...))
}

// ReferrerPathGT applies the GT predicate on the "referrer_path" field.
func ReferrerPathGT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldReferrerPath, v))
}

// ReferrerPathGTE applies the GTE predicate on the "referrer_path" field.
func ReferrerPathGTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldReferrerPath, v))
}

// ReferrerPathLT applies the LT predicate on the "referrer_path" field.
func ReferrerPathLT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldReferrerPath, v))
}

// ReferrerPathLTE applies the LTE predicate on the "referrer_path" field.
func ReferrerPathLTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldReferrerPath, v))
}

// ReferrerPathContains applies the Contains predicate on the "referrer_path" field.
func ReferrerPathContains(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContains(FieldReferrerPath, v))
}

// ReferrerPathHasPrefix applies the HasPrefix predicate on the "referrer_path" field.
func ReferrerPathHasPrefix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasPrefix(FieldReferrerPath, v))
}

// ReferrerPathHasSuffix applies the HasSuffix predicate on the "referrer_path" field.
func ReferrerPathHasSuffix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasSuffix(FieldReferrerPath, v))
}

// ReferrerPathIsNil applies the IsNil predicate on the "referrer_path" field.
func ReferrerPathIsNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIsNull(FieldReferrerPath))
}

// ReferrerPathNotNil applies the NotNil predicate on the "referrer_path" field.
func ReferrerPathNotNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotNull(FieldReferrerPath))
}

// ReferrerPathEqualFold applies the EqualFold predicate on the "referrer_path" field.
func ReferrerPathEqualFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEqualFold(FieldReferrerPath, v))
}

// ReferrerPathContainsFold applies the ContainsFold predicate on the "referrer_path" field.
func ReferrerPathContainsFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContainsFold(FieldReferrerPath, v))
}

// ReferrerQueryEQ applies the EQ predicate on the "referrer_query" field.
func ReferrerQueryEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldReferrerQuery, v))
}

// ReferrerQueryNEQ applies the NEQ predicate on the "referrer_query" field.
func ReferrerQueryNEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldReferrerQuery, v))
}

// ReferrerQueryIn applies the In predicate on the "referrer_query" field.
func ReferrerQueryIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldReferrerQuery, vs...))
}

// ReferrerQueryNotIn applies the NotIn predicate on the "referrer_query" field.
func ReferrerQueryNotIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldReferrerQuery, vs...))
}

// ReferrerQueryGT applies the GT predicate on the "referrer_query" field.
func ReferrerQueryGT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldReferrerQuery, v))
}

// ReferrerQueryGTE applies the GTE predicate on the "referrer_query" field.
func ReferrerQueryGTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldReferrerQuery, v))
}

// ReferrerQueryLT applies the LT predicate on the "referrer_query" field.
func ReferrerQueryLT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldReferrerQuery, v))
}

// ReferrerQueryLTE applies the LTE predicate on the "referrer_query" field.
func ReferrerQueryLTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldReferrerQuery, v))
}

// ReferrerQueryContains applies the Contains predicate on the "referrer_query" field.
func ReferrerQueryContains(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContains(FieldReferrerQuery, v))
}

// ReferrerQueryHasPrefix applies the HasPrefix predicate on the "referrer_query" field.
func ReferrerQueryHasPrefix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasPrefix(FieldReferrerQuery, v))
}

// ReferrerQueryHasSuffix applies the HasSuffix predicate on the "referrer_query" field.
func ReferrerQueryHasSuffix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasSuffix(FieldReferrerQuery, v))
}

// ReferrerQueryIsNil applies the IsNil predicate on the "referrer_query" field.
func ReferrerQueryIsNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIsNull(FieldReferrerQuery))
}

// ReferrerQueryNotNil applies the NotNil predicate on the "referrer_query" field.
func ReferrerQueryNotNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotNull(FieldReferrerQuery))
}

// ReferrerQueryEqualFold applies the EqualFold predicate on the "referrer_query" field.
func ReferrerQueryEqualFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEqualFold(FieldReferrerQuery, v))
}

// ReferrerQueryContainsFold applies the ContainsFold predicate on the "referrer_query" field.
func ReferrerQueryContainsFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContainsFold(FieldReferrerQuery, v))
}

// ReferrerDomainEQ applies the EQ predicate on the "referrer_domain" field.
func ReferrerDomainEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldReferrerDomain, v))
}

// ReferrerDomainNEQ applies the NEQ predicate on the "referrer_domain" field.
func ReferrerDomainNEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldReferrerDomain, v))
}

// ReferrerDomainIn applies the In predicate on the "referrer_domain" field.
func ReferrerDomainIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldReferrerDomain, vs...))
}

// ReferrerDomainNotIn applies the NotIn predicate on the "referrer_domain" field.
func ReferrerDomainNotIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldReferrerDomain, vs...))
}

// ReferrerDomainGT applies the GT predicate on the "referrer_domain" field.
func ReferrerDomainGT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldReferrerDomain, v))
}

// ReferrerDomainGTE applies the GTE predicate on the "referrer_domain" field.
func ReferrerDomainGTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldReferrerDomain, v))
}

// ReferrerDomainLT applies the LT predicate on the "referrer_domain" field.
func ReferrerDomainLT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldReferrerDomain, v))
}

// ReferrerDomainLTE applies the LTE predicate on the "referrer_domain" field.
func ReferrerDomainLTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldReferrerDomain, v))
}

// ReferrerDomainContains applies the Contains predicate on the "referrer_domain" field.
func ReferrerDomainContains(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContains(FieldReferrerDomain, v))
}

// ReferrerDomainHasPrefix applies the HasPrefix predicate on the "referrer_domain" field.
func ReferrerDomainHasPrefix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasPrefix(FieldReferrerDomain, v))
}

// ReferrerDomainHasSuffix applies the HasSuffix predicate on the "referrer_domain" field.
func ReferrerDomainHasSuffix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasSuffix(FieldReferrerDomain, v))
}

// ReferrerDomainIsNil applies the IsNil predicate on the "referrer_domain" field.
func ReferrerDomainIsNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIsNull(FieldReferrerDomain))
}

// ReferrerDomainNotNil applies the NotNil predicate on the "referrer_domain" field.
func ReferrerDomainNotNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotNull(FieldReferrerDomain))
}

// ReferrerDomainEqualFold applies the EqualFold predicate on the "referrer_domain" field.
func ReferrerDomainEqualFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEqualFold(FieldReferrerDomain, v))
}

// ReferrerDomainContainsFold applies the ContainsFold predicate on the "referrer_domain" field.
func ReferrerDomainContainsFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContainsFold(FieldReferrerDomain, v))
}

// PageTitleEQ applies the EQ predicate on the "page_title" field.
func PageTitleEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldPageTitle, v))
}

// PageTitleNEQ applies the NEQ predicate on the "page_title" field.
func PageTitleNEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldPageTitle, v))
}

// PageTitleIn applies the In predicate on the "page_title" field.
func PageTitleIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldPageTitle, vs...))
}

// PageTitleNotIn applies the NotIn predicate on the "page_title" field.
func PageTitleNotIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldPageTitle, vs...))
}

// PageTitleGT applies the GT predicate on the "page_title" field.
func PageTitleGT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldPageTitle, v))
}

// PageTitleGTE applies the GTE predicate on the "page_title" field.
func PageTitleGTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldPageTitle, v))
}

// PageTitleLT applies the LT predicate on the "page_title" field.
func PageTitleLT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldPageTitle, v))
}

// PageTitleLTE applies the LTE predicate on the "page_title" field.
func PageTitleLTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldPageTitle, v))
}

// PageTitleContains applies the Contains predicate on the "page_title" field.
func PageTitleContains(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContains(FieldPageTitle, v))
}

// PageTitleHasPrefix applies the HasPrefix predicate on the "page_title" field.
func PageTitleHasPrefix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasPrefix(FieldPageTitle, v))
}

// PageTitleHasSuffix applies the HasSuffix predicate on the "page_title" field.
func PageTitleHasSuffix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasSuffix(FieldPageTitle, v))
}

// PageTitleIsNil applies the IsNil predicate on the "page_title" field.
func PageTitleIsNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIsNull(FieldPageTitle))
}

// PageTitleNotNil applies the NotNil predicate on the "page_title" field.
func PageTitleNotNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotNull(FieldPageTitle))
}

// PageTitleEqualFold applies the EqualFold predicate on the "page_title" field.
func PageTitleEqualFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEqualFold(FieldPageTitle, v))
}

// PageTitleContainsFold applies the ContainsFold predicate on the "page_title" field.
func PageTitleContainsFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContainsFold(FieldPageTitle, v))
}

// PageDataEQ applies the EQ predicate on the "page_data" field.
func PageDataEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldPageData, v))
}

// PageDataNEQ applies the NEQ predicate on the "page_data" field.
func PageDataNEQ(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldPageData, v))
}

// PageDataIn applies the In predicate on the "page_data" field.
func PageDataIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldPageData, vs...))
}

// PageDataNotIn applies the NotIn predicate on the "page_data" field.
func PageDataNotIn(vs ...string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldPageData, vs...))
}

// PageDataGT applies the GT predicate on the "page_data" field.
func PageDataGT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldPageData, v))
}

// PageDataGTE applies the GTE predicate on the "page_data" field.
func PageDataGTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldPageData, v))
}

// PageDataLT applies the LT predicate on the "page_data" field.
func PageDataLT(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldPageData, v))
}

// PageDataLTE applies the LTE predicate on the "page_data" field.
func PageDataLTE(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldPageData, v))
}

// PageDataContains applies the Contains predicate on the "page_data" field.
func PageDataContains(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContains(FieldPageData, v))
}

// PageDataHasPrefix applies the HasPrefix predicate on the "page_data" field.
func PageDataHasPrefix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasPrefix(FieldPageData, v))
}

// PageDataHasSuffix applies the HasSuffix predicate on the "page_data" field.
func PageDataHasSuffix(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldHasSuffix(FieldPageData, v))
}

// PageDataIsNil applies the IsNil predicate on the "page_data" field.
func PageDataIsNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIsNull(FieldPageData))
}

// PageDataNotNil applies the NotNil predicate on the "page_data" field.
func PageDataNotNil() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotNull(FieldPageData))
}

// PageDataEqualFold applies the EqualFold predicate on the "page_data" field.
func PageDataEqualFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEqualFold(FieldPageData, v))
}

// PageDataContainsFold applies the ContainsFold predicate on the "page_data" field.
func PageDataContainsFold(v string) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldContainsFold(FieldPageData, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// HasWebsite applies the HasEdge predicate on the "website" edge.
func HasWebsite() predicate.WebsiteEvent {
	return predicate.WebsiteEvent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WebsiteTable, WebsiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebsiteWith applies the HasEdge predicate on the "website" edge with a given conditions (other predicates).
func HasWebsiteWith(preds ...predicate.Website) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(func(s *sql.Selector) {
		step := newWebsiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WebsiteEvent) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WebsiteEvent) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WebsiteEvent) predicate.WebsiteEvent {
	return predicate.WebsiteEvent(func(s *sql.Selector) {
		p(s.Not())
	})
}
